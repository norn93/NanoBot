1) git pull (to get up to date with the branch)
2) git add . (adds all the files to the 'index')
3) git commit -m "message (records changes to the repo)
4) git push origin master (to push onto the server)

Branching
1) git branch branch_name (create a branch with that name)
2) git checkout branch_name (change which branch you're in)

Push branch to remote repository
1) git push -u origin branch_name
2) git branch -a (list all branches)

Merge a branch with master
1) git checkout master (switch to master)
2) git pull origin master
3) git branch --merged (check if they are merged)
4) git merge branch_name (merge changes to master)
5) git push origin master (push to master branch)

Delete a branch
1) git branch -d branch_name

================================================

I have two branches namely master and development in a GitHub Repository. I am doing all my development in development branch as shown.

git branch development
git add *
git commit -m "My initial commit message"
git push -u origin development
Now I want to merge all the changes on the development branch into the master. My current approach is:

(on branch development)$ git merge master
(resolve any merge conflicts if there are any)
git checkout master
git merge development (there won't be any conflicts now)

Another change